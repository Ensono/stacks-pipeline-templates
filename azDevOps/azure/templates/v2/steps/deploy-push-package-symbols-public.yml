############################################################################################################
# desc: Publishes the packages to nuget.org
# params:
# return: Publishes packages to nuget.org
# pre-reqs: Packages are packed

# Important: There is bug in .NET Core 2.1 SDK which returns a 409 on trying to publish the symbols package
# See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-nuget-push for more information.
# If you require symbols to be published publically please add a step:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/symbols
############################################################################################################

parameters:
  publish_symbols: true
  use_nuget_service_connection: false
  nuget_service_connection: ''
steps:
  - ${{ if eq(parameters.use_nuget_service_connection, true) }}:
      - task: NuGetAuthenticate@0
        condition:
        inputs:
          nuGetServiceConnections: ${{ parameters.nuget_service_connection }}

  - task: PowerShell@2
    inputs:
      targetType: inline
      pwsh: true
      workingDirectory: $(Build.ArtifactStagingDirectory)
      script: |
        try
        {
          $noSymbols = [System.Convert]::ToBoolean("${{ parameters.publish_symbols }}")
        }
        catch [FormatException]
        {
          $noSymbols = $false
        }

        $noSymbols = -not $noSymbols

        $dotnetVersion = dotnet --version

        $noSymbolsArgs = @()

        $dotnetSixOrNewerCheck = [System.Version]$dotnetVersion -ge [System.Version]"6.0.200"

        Write-Host "Dotnet Version >6.0.200: $dotnetSixOrNewerCheck"
        if ($dotnetSixOrNewerCheck -eq $true)
        {
          if ($noSymbols -eq $true)
          {
            $noSymbolsArgs = @(
              "--no-symbols"
            )
          }
        }
        else
        {
            $noSymbolsArgs = @(
              "--no-symbols",
              $noSymbols
            )
        }

        try
        {
          $useServiceConnection = [System.Convert]::ToBoolean("${{ parameters.use_nuget_service_connection }}")
        }
        catch [FormatException]
        {
          $useServiceConnection = $false
        }

        if ($useServiceConnection -eq $false)
        {
          $apiKeyOption = @(
            "--api-key",
            "$(NUGET_API_KEY)"
          )
        }

        Write-Host "dotnet nuget push $apiKeyOption --source https://api.nuget.org/v3/index.json  **/*.nupkg --skip-duplicate $noSymbolsArgs"
        dotnet nuget push @apiKeyOption --source https://api.nuget.org/v3/index.json  **/*.nupkg --skip-duplicate @noSymbolsArg
    displayName: 'Publish: Push Packages Public'
