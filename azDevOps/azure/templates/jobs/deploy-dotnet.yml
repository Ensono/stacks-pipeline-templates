parameters:
  devops_artefact_name: ''
  dependsOn: ''
  environment: ''
  build_file: false
  build_artefact: ''
  test_artefact: 'tests'
  test_baseurl: ''
  functional_test: false
  smoke_test: false
  kubernetes_clusterrg: ''
  kubernetes_clustername: ''
  kubernetes_kustomize_filepath: ''
  kubernetes_docker_registry: ''
  cosmosdb_secret: false
  cosmosdb_accountName: ''
  appinsights_enabled: false
  appinsights_accountName: ''
  performance_test: false
  dotnet_core_version: '2.2.x'

jobs:
  - deployment: ${{ parameters.environment }}
    dependsOn: ${{ parameters.dependsOn }}
    variables:
      - name: BaseURL
        value: ${{ parameters.test_baseurl }}
    pool:
      vmImage: 'ubuntu-latest'
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
            # Prerequisites
            - ${{ if eq(parameters.build_file, true) }}:
                - download: current
                  displayName: 'Download: Build Artefacts'
                  artifact: '${{ parameters.build_artefact }}'

            # Download this artefact if functional or performance tests are enabled for this deployment
            - ${{ if or(eq(parameters.functional_test, true), eq(parameters.performance_test, true)) }}:
                - download: current
                  displayName: 'Download: Test Artefacts'
                  artifact: '${{ parameters.test_artefact }}'

            - template: ../steps/build-consume-devops.yml

            - template: ../steps/login-services.yml
              parameters:
                # Azure
                login_azure: true
                azure_tenant_id: '$(azure_tenant_id)'
                azure_subscription_id: '$(azure_subscription_id)'
                azure_client_id: '$(azure_client_id)'
                azure_client_secret: '$(azure_client_secret)'
                # Kubernetes
                login_kubernetes: true
                aks_rg: '${{ parameters.kubernetes_clusterrg }}'
                aks_clustername: '${{ parameters.kubernetes_clustername }}'
                devops_artefact_name: '${{ parameters.devops_artefact_name }}'

            # Mutation
            - task: Bash@3
              displayName: 'Mutate: Annotate Version Information'
              inputs:
                targetType: 'filePath'
                filePath: $(Pipeline.Workspace)/${{ parameters.devops_artefact_name }}/Kustomize/kustomize-annotate-version.sh
                arguments: $(Build.BinariesDirectory)/kustomize $(Docker.ImageTag)
                workingDirectory: $(Pipeline.Workspace)/build/base
                failOnStderr: true

            # This step writes to cosmosDB.key and cosmosDB.endoint for consumption later in the pipeline
            - ${{ if eq(parameters.cosmosdb_secret, true) }}:
                - task: Bash@3
                  displayName: 'Get: CosmosDB Key and Endpoint'
                  inputs:
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/${{ parameters.devops_artefact_name }}/Azure/get-cosmosdb-key-endpoint.sh
                    arguments: ${{ parameters.cosmosdb_accountName}}

            - ${{ if eq(parameters.appinsights_enabled, true) }}:
                - task: Bash@3
                  displayName: 'Get: AppInsights Instrumentation Key and Endpoint'
                  inputs:
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/${{ parameters.devops_artefact_name }}/Azure/get-appinsights-instrumentationkey.sh
                    arguments: ${{ parameters.appinsights_accountName}}

                - task: Bash@3
                  displayName: 'Mutate: Secrets from Environment Vars'
                  inputs:
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/${{ parameters.devops_artefact_name }}/Kubectl/inject-secrets-from-env-var.sh
                    arguments: $(Pipeline.Workspace)/build/${{ parameters.kubernetes_kustomize_filepath }}/secrets
                    failOnStderr: true
                  env:
                    # Conditionally expose this env-var if appinsights_enabled is true
                    ${{ if eq(parameters.appinsights_enabled, true) }}:
                      appinsights_instrumentationkey: $(Monitoring.applnsightsInstrumentationKey)
                    # Conditionally expose this env-var if cosmosDB_secret is true
                    ${{ if eq(parameters.cosmosdb_secret, true) }}:
                      cosmosdb_key: $(CosmosDB.key)

                - bash: |
                    echo "Setting api-image to '${{ parameters.kubernetes_docker_registry }}'/$(Docker.ImageName):$(Docker.ImageTag)"
                    $(Build.BinariesDirectory)/kustomize edit set image api-image='${{ parameters.kubernetes_docker_registry }}'/$(Docker.ImageName):$(Docker.ImageTag);
                  workingDirectory: $(Pipeline.Workspace)/${{ parameters.build_artefact }}/base
                  displayName: 'Mutate: Set Docker Image Version for api-image'
                  failOnStderr: true

            # Deployment
            - task: Bash@3
              displayName: 'Deploy: Kubectl Apply with Kustomize'
              inputs:
                targetType: 'filePath'
                filePath: $(Pipeline.Workspace)/${{ parameters.devops_artefact_name }}/Kubectl/apply-with-kustomize.sh
                arguments: ./${{ parameters.kubernetes_kustomize_filepath }}
                workingDirectory: $(Pipeline.Workspace)/${{ parameters.build_artefact }}
                failOnStderr: true

            # Install dotnet core version based on project dependencies
            - ${{ if or(eq(parameters.functional_test, true), eq(parameters.smoke_test, true)) }}:
                - task: UseDotNet@2
                  displayName: 'Use .NET Core SDK ${{ parameters.dotnet_core_version }}'
                  inputs:
                    packageType: sdk
                    version: ${{ parameters.dotnet_core_version }}
                    installationPath: $(Agent.ToolsDirectory)/dotnet

                - script: dotnet --list-sdks
                  displayName: 'Check dotnet sdks installed'

            # Functional Testing
            - ${{ if eq(parameters.functional_test, true) }}:
                - task: DotNetCoreCLI@2
                  displayName: 'Test: Run Functional Tests'
                  inputs:
                    command: test
                    projects: '$(Test.FunctionalTestProjectSourcePath)/$(Test.FunctionalTestProjectFile)'
                    arguments: '-v n'
                    testRunTitle: 'Functional Tests'

                - task: Bash@3
                  displayName: 'Upload: Test Results'
                  inputs:
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/${{ parameters.devops_artefact_name }}/Azure/upload-azstorage-blob.sh
                    arguments: $(Test.FunctionalTestReportStorageAccountRG) $(Test.FunctionalTestReportSourcePath) $(Test.FunctionalTestReportStorageAccountName) $(Test.FunctionalTestReportStorageContainerName) $(Test.FunctionalTestReportTargetName)

                - task: Bash@3
                  displayName: 'Retrieve URL: Test Results'
                  inputs:
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/${{ parameters.devops_artefact_name }}/Azure/get-azstorage-sasurl.sh
                    arguments: $(Test.FunctionalTestReportStorageAccountRG) $(Test.FunctionalTestReportStorageAccountName) $(Test.FunctionalTestReportStorageContainerName) $(Test.FunctionalTestReportTargetName)

            # Smoke Testing
            - ${{ if eq(parameters.smoke_test, true) }}:
                - task: DotNetCoreCLI@2
                  displayName: 'Test: Run Smoke Tests'
                  inputs:
                    command: test
                    projects: '$(Test.FunctionalTestProjectSourcePath)/$(Test.FunctionalTestProjectFile)'
                    arguments: '-v n --filter Category=SmokeTest'
                    testRunTitle: 'Smoke Tests'

            # Performance Testing
            - ${{ if eq(parameters.performance_test, true) }}:
                - bash: |
                    echo "-Denv=${{ parameters.environment }} -Dusers=$(Performance.Testing.Users) -Drampup=$(Performance.Testing.RampUp)"
                    mvn clean gatling:test -Denv=${{ parameters.environment }} -Dusers=$(Performance.Testing.Users) -Drampup=$(Performance.Testing.RampUp)
                  workingDirectory: '$(Test.PerformanceTestProjectSourcePath)'
                  displayName: 'Test: Run Performance Tests'
