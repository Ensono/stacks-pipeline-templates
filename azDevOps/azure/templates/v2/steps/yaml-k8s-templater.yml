parameters:
  # template_input: [{base: "", out: "", env_vars: {}, args: ""}]
  template_input: []
  shared_env_vars: {}
  enable_debug: ""
  scripts_dir: ""

steps:
  #####################
  ## Templating task ##
  ## :inputs: Array(base: string, out: string, env_vars: map) -
  ## :inputs.base: string - file path to base yaml template with shell style variables as place holders
  ## :inputs.out: string - file path to outputted yaml with replaced variables inside the template
  ## ==> if empty will default to base file and stripping out the `base_` from name
  ## if convention is followed no need to specify out and only pass
  ## :inputs.env_vars: map - key/value string pairs to replace per file
  #####################
  - ${{ each tpl in parameters.template_input }}:
      - bash: |
          chmod -R +x yaml-templating.sh
          do_debug=${{ parameters.enable_debug }}
          if [[ $do_debug ]]; then
            ./yaml-templating.sh -i ${{ tpl.base }} -o "${{ tpl.out }}" -a "${{ coalesce(tpl.args, '', '') }}" -s
          else
            ./yaml-templating.sh -i ${{ tpl.base }} -o "${{ tpl.out }}" -a "${{ coalesce(tpl.args, '', '') }}"
          fi
        displayName: "K8s: Yaml ${{ tpl.displayName }}"
        failOnStderr: true
        workingDirectory: ${{ parameters.scripts_dir }}
        env:
          ${{ each var in parameters.shared_env_vars }}:
            ${{ var.key }}: ${{ var.value }}
          ${{ each var in tpl.env_vars }}:
            ${{ var.key }}: ${{ var.value }}
