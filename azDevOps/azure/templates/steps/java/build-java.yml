parameters:
  repo_root_dir: ""
  project_root_dir: ""
  pipeline_scripts_directory: ""
  # Maven
  maven_cache_directory: ""
  maven_surefire_reports_dir: ""
  maven_allowed_test_tags: ""
  maven_pom_file: "pom.xml"
  maven_settings_file: ""
  maven_repository_server: ""
  # Artifactory
  artifactory_username: ""
  artifactory_password: ""
  # Docker Config
  docker_build_container: ""
  # Vulnerability Scanning
  vulnerability_scan: false
  vulnerability_scan_fail_build_on_detection: true
  vulnerability_scan_report: ""
  vulnerability_scan_api_key: ""
  vulnerability_scan_database_directory: ""
  project_type: ""
  build_type: ""
  # Testing
  functional_testing_required: false
steps:
  # Maven: Cache packages
  - task: Cache@2
    inputs:
      key: 'maven | "$(Agent.OS)" | ${{ parameters.project_root_dir }}/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)"
        maven
      path: "${{ parameters.project_root_dir }}/${{ parameters.maven_cache_directory }}"
    displayName: Cache Maven packages (${{ parameters.project_type }})

  # Maven: Install Packages
  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-maven-install.bash"
      arguments: >
        -U "${{ parameters.ossrh_jira_id }}"
        -P "${{ parameters.ossrh_jira_password }}"
        -S "${{ parameters.maven_settings_file }}"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Install Packages (${{ parameters.project_type }})"

  # Maven: Update version to the value defined in maven_package_version
  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-maven-update-version.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
        -V "${{ parameters.maven_package_version }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Update version (${{ parameters.project_type }})"

  # Maven: Checkstyle Check
  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-checkstyle-check.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Checkstyle Check (${{ parameters.project_type }})"

  # Maven: Format Check
  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-format-check.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Format Check (${{ parameters.project_type }})"

  # Maven: Spotbugs Check
  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-spotbugs-check.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Spotbugs Check (${{ parameters.project_type }})"

  # Maven: OWASP Vulnerability Scan, runs if vulnerability_scan=true
  - ${{ if eq(parameters.vulnerability_scan, true) }}:
      - task: Bash@3
        inputs:
          targetType: "inline"
          script: |
            DATE="$(date "+%F")"
            HOUR="$(date "+%H")"

            # NVD Cache lasts 4 hours (240 mins) and so cache based on the hour's time
            # in 24 hours. E.g. 0-3 are 0, 1-4 are 1, 20-23 are 5 etc.. This gives a
            # cache that lasts roughly 4 hours at a time.
            HOUR_BY_FOUR="$(( ${HOUR} / 4 ))"

            NVD_CACHE_FILE="${DATE}-${HOUR_BY_FOUR}"

            echo "echoing to a file '${{ parameters.repo_root_dir }}/.nvd-cache-day' with value '${DATE}'"
            echo "echoing to a file '${{ parameters.repo_root_dir }}/.nvd-cache-full' with value '${NVD_CACHE_FILE}'"

            # Partial (slow) download lasts 24 hours
            echo "${DATE}" > ${{ parameters.repo_root_dir }}/.nvd-cache-day
            # Full Cache is 4 hours, so use the by four computed variable
            echo "${NVD_CACHE_FILE}" > ${{ parameters.repo_root_dir }}/.nvd-cache-full
        displayName: Set NVD Cache Variable

      - task: Cache@2
        inputs:
          key: '${{ parameters.repo_root_dir }}/.nvd-cache-day | ${{ parameters.repo_root_dir }}/.nvd-cache-full'
          restoreKeys: |
            ${{ parameters.repo_root_dir }}/.nvd-cache-day
          path: "${{ parameters.vulnerability_scan_database_directory }}"
        displayName: Cache NVD Datatbase

      - task: Bash@3
        inputs:
          filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-owasp-dependency-check.bash"
          arguments: >
            -W "${{ parameters.vulnerability_scan_database_directory }}"
            -X "${{ parameters.vulnerability_scan_api_key }}"
            -Y "${{ parameters.vulnerability_scan_fail_build_on_detection }}"
            -Z "${{ parameters.maven_cache_directory }}"
          workingDirectory: "${{ parameters.project_root_dir }}"
        env:
          LC_ALL: "C.UTF-8"
        target:
          container: ${{ parameters.docker_build_container }}
        displayName: "Maven: OWASP Vulnerability Scan (${{ parameters.project_type }})"

      - task: CopyFiles@2
        inputs:
          sourceFolder: "${{ parameters.project_root_dir }}/target"
          content: "${{ parameters.project_root_dir }}/${{ parameters.vulnerability_scan_report }}"
          targetFolder: "$(Build.ArtifactStagingDirectory)/${{ parameters.vulnerability_scan_report }}"
          cleanTargetFolder: true
        displayName: "Copy File "

  # Maven: Compile Application
  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-maven-compile.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Compile Application (${{ parameters.project_type }})"

  - ${{ if eq(parameters.functional_testing_required, true) }}:
      # Test: Download Test Dependencies
      - task: Bash@3
        inputs:
          filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-download-test-deps.bash"
          arguments: >
            -X "${{ parameters.maven_allowed_test_tags }}"
            -Y "${{ parameters.maven_surefire_reports_dir }}"
            -Z "${{ parameters.maven_cache_directory }}"
          workingDirectory: "${{ parameters.project_root_dir }}"
        target:
          container: ${{ parameters.docker_build_container }}
        displayName: "Test: Download Test Deps (${{ parameters.project_type }})"

      # Test: Unit tests
      - task: Bash@3
        inputs:
          filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
          arguments: >
            -a "Unit"
            -Z "${{ parameters.maven_cache_directory }}"
          workingDirectory: "${{ parameters.project_root_dir }}"
        target:
          container: ${{ parameters.docker_build_container }}
        displayName: "Test: Unit tests (${{ parameters.project_type }})"

      # Test: Component tests
      - task: Bash@3
        inputs:
          filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
          arguments: >
            -a "Component"
            -Z "${{ parameters.maven_cache_directory }}"
          workingDirectory: "${{ parameters.project_root_dir }}"
        target:
          container: ${{ parameters.docker_build_container }}
        displayName: "Test: Component tests (${{ parameters.project_type }})"

      # Test: Integration tests
      - task: Bash@3
        inputs:
          filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
          arguments: >
            -a "Integration"
            -Z "${{ parameters.maven_cache_directory }}"
          workingDirectory: "${{ parameters.project_root_dir }}"
        target:
          container: ${{ parameters.docker_build_container }}
        displayName: "Test: Integration tests (${{ parameters.project_type }})"

      # Test: Generate Jacoco coverage reports
      - task: Bash@3
        inputs:
          filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-generate-jacoco-report.bash"
          arguments: >
            -Z "${{ parameters.maven_cache_directory }}"
          workingDirectory: "${{ parameters.project_root_dir }}"
        target:
          container: ${{ parameters.docker_build_container }}
        displayName: "Generate Jacoco coverage reports (${{ parameters.project_type }})"

      # Gulp: Inline Jacoco report assets
      # TODO: Pull this out into a pwsh script?
      - task: PowerShell@2
        inputs:
          targetType: inline
          script: |
            . /opt/microsoft/powershell/7/Microsoft.PowerShell_profile.ps1
            Copy-Item -Path "${{ parameters.repo_root_dir }}/build/azDevOps/azure/coverage/*" -Destination . -Recurse
            npm ci
            ./node_modules/.bin/gulp inline-css-images
            ./node_modules/.bin/gulp inline-sources
          workingDirectory: "${{ parameters.project_root_dir }}/target/site/"
        target:
          container: node
        displayName: "Gulp: Inline Jacoco report assets (${{ parameters.project_type }})"
