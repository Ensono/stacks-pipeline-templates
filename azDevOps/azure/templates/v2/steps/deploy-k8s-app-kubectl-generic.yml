parameters:
  dry_run: false
  login_gcp: false
  login_gke: false
  login_gcr: false
  gcp_auth: {}
  login_azure: false
  login_kubernetes: false
  azure_auth: {}
  cluster_name: ""
  working_dir: ""
  deployment_defs: {}

steps:
  # Do Login
  - template: ./login-services.yml
    parameters:
      login_gcp: ${{ parameters.login_gcp }}
      login_gke: ${{ parameters.login_gke }}
      login_gcr: ${{ parameters.login_gcr }}
      gcp_auth: ${{ parameters.gcp_auth }}
      login_azure: ${{ parameters.login_azure }}
      login_kubernetes: ${{ parameters.login_kubernetes }}

  - bash: apt install jq
    displayName: install jq

  - ${{ each deployment in parameters.deployment_defs }}:
      - bash: |
          set -eou pipefail
          timeoutMinutes=10
          echo "dry_run: ${dry_run}"
          if [ "$dry_run" = "True" ]
          then
              echo "performing dry run"
              cat ${{ deployment.file }}
              kubectl apply -f ${{ deployment.file }} ${{ deployment.context }} --dry-run=true
          else
              kubectlOutput=$(kubectl apply -f ${{ deployment.file }} ${{ deployment.context }} -o json)
              echo "kubectl apply complete"
              deployments=$(jq -c '.items[] | select(.kind == "Deployment") | {name: .metadata.name, namespace: .metadata.namespace}' <<< $kubectlOutput)
              for deployment in $deployments
              do
                  deploymentName=$(echo "$deployment" | jq -r .name)
                  deploymentNamepace=$(echo "$deployment" | jq -r .namespace)
                  echo "checking deployment rollout status: ${deploymentNamepace}/${deploymentName}"
                  kubectl -n "$deploymentNamepace" rollout status "deployment.v1.apps/${deploymentName}" --timeout "${timeoutMinutes}m"
              done
          fi
        displayName: "K8s: Deploy ${{ deployment.name }}"
        workingDirectory: ${{ parameters.working_dir }}
        env:
          dry_run: ${{ parameters.dry_run }}
          # AUTH PARAMS
          ${{ each var in parameters.gcp_auth }}:
            ${{ var.key }}: ${{ var.value }}
          ${{ each var in parameters.azure_auth }}:
            ${{ var.key }}: ${{ var.value }}

  - ${{ each deployment in parameters.deployment_defs }}:
      - bash: |
          cat ${{ deployment.file }}
        displayName: "Print yaml on failure: ${{ deployment.name }}"
        workingDirectory: ${{ parameters.working_dir }}
        condition: failed()
