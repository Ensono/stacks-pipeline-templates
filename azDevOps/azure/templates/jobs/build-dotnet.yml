parameters:
  devops_artefact_name: 'DevOps'
  dependsOn: 'GetPackage'
  # Docker Config
  docker_workdir: ''
  docker_imagename: ''
  docker_imagetag: ''
  docker_containerregistryname: ''
  # Vulnerability Scanning
  vulnerability_scan: false
  vulnerability_workdir: ''
  #  Static Code Analysis
  static_code_analysis: false
  static_code_analysis_build_path: ''
  code_coverage_arguments: ''
  Sonar_serviceConnection: ''
  Sonar_organization: ''
  Sonar_scannerMode: ''
  Sonar_projectKey: ''
  Sonar_projectName: ''
  Sonar_projectVersion: ''
  Sonar_extraProperties: ''
  # Testing
  unit_test: false
  unit_test_project: ''
  component_test: false
  component_test_project: ''
  integration_test: false
  integration_test_project: ''
  integration_test_cosmosdb_secret: false
  integration_test_cosmosdb_account: ''
  integration_test_cosmosdb_database: ''
  contract_test: false
  contract_test_project: ''
  functional_test: false
  functional_test_path: ''
  functional_test_artefact: ''
  # Build File Output
  build_file: false
  build_file_path: ''
  build_file_artefact: ''
  # .NET Core version variable
  dotnet_core_version: '2.2.x'

jobs:
  - job: BuildDotNet
    dependsOn: ${{ parameters.dependsOn }}
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: false
    variables:
      - name: code_coverage_filename
        value: coverage.opencover.xml
      - name: code_coverage_cobertura_directory
        value: coverage
    steps:
      # Get DevOps Artefact and Install Prerequisites
      - template: ../steps/build-consume-devops.yml

      # Login to Azure/AKS
      - template: ../steps/login-services.yml
        parameters:
          # Azure
          login_azure: true
          azure_tenant_id: '$(azure_tenant_id)'
          azure_subscription_id: '$(azure_subscription_id)'
          azure_client_id: '$(azure_client_id)'
          azure_client_secret: '$(azure_client_secret)'
          # Kubernetes
          login_kubernetes: false
          devops_artefact_name: '${{ parameters.devops_artefact_name }}'

      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK ${{ parameters.dotnet_core_version }}'
        inputs:
          packageType: sdk
          version: ${{ parameters.dotnet_core_version }}
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - script: dotnet --list-sdks
        displayName: 'Check dotnet sdks installed'

      # SonarCloud Start
      - ${{ if eq(parameters.static_code_analysis, true) }}:
          # Set Sonar extra properties based on parameter input
          - bash: |
              if [ -z "${{ parameters.Sonar_extraProperties }}" ]; then
                EXTRA_PROPERTIES="sonar.cs.opencover.reportsPaths=${{ parameters.static_code_analysis_build_path }}/**/${{ variables.code_coverage_filename }}"$'\n'
              else
                EXTRA_PROPERTIES="${{ parameters.Sonar_extraProperties }}"$'\n'
              fi
              echo "##vso[task.setvariable variable=Sonar_extraProperties]$EXTRA_PROPERTIES"
            displayName: 'Set Sonar Extra Properties variable'

          - task: UseDotNet@2
            displayName: 'Use .NET Core SDK 2.2.x For SonarCloud'
            inputs:
              version: '2.2.x'
              packageType: runtime

          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: ${{ parameters.Sonar_serviceConnection }}
              organization: ${{ parameters.Sonar_organization }}
              scannerMode: ${{ parameters.Sonar_scannerMode }}
              projectKey: ${{ parameters.Sonar_projectKey }}
              projectName: ${{ parameters.Sonar_projectName }}
              projectVersion: ${{ parameters.Sonar_projectVersion }}
              extraProperties: |
                $(Sonar_extraProperties)
            displayName: 'SonarCloud: Prepare for Analysis'

          # SonarCloud wants a build to analyse
          - task: DotNetCoreCLI@2
            displayName: 'Build for SonarCloud analysis'
            inputs:
              command: 'build'
              workingDirectory: ${{ parameters.static_code_analysis_build_path }}

      # Set the code_coverage_arguments variable to make `dotnet test` output coverage
      - bash: |
          if [ -z "${{ parameters.code_coverage_arguments }}" ]; then
            CODE_COVERAGE_ARGUMENTS="/p:CollectCoverage=true /p:CoverletOutputFormat=opencover"
          else
            CODE_COVERAGE_ARGUMENTS="${{ parameters.code_coverage_arguments }}"
          fi
          echo "##vso[task.setvariable variable=code_coverage_arguments]$CODE_COVERAGE_ARGUMENTS"
        displayName: 'Set dotnet test arguments for code coverage generation'

      # Unit Test
      - ${{ if eq(parameters.unit_test, true) }}:
          - task: DotNetCoreCLI@2
            displayName: 'Test: Unit tests'
            inputs:
              command: test
              projects: '${{ parameters.unit_test_project }}'
              arguments: '-v n $(code_coverage_arguments)'
              testRunTitle: 'Test: Unit tests'

      # Component Test
      - ${{ if eq(parameters.component_test, true) }}:
          - task: DotNetCoreCLI@2
            displayName: 'Test: Component tests'
            inputs:
              command: test
              projects: '${{ parameters.component_test_project }}'
              arguments: '-v n $(code_coverage_arguments)'
              testRunTitle: 'Test: Component tests'

      # Integration Test
      - ${{ if eq(parameters.integration_test_cosmosdb_secret, true) }}:
          - task: Bash@3
            displayName: 'Get: CosmosDB Account Key for Integration Tests'
            inputs:
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/${{ parameters.devops_artefact_name }}/Azure/get-cosmosdb-key-endpoint.sh
              arguments: ${{ parameters.integration_test_cosmosdb_account }}

          - bash: |
              echo Setting CosmosDB Database Name to ${{ parameters.integration_test_cosmosdb_database }}
              echo "##vso[task.setvariable variable=CosmosDB__DatabaseName]${{ parameters.integration_test_cosmosdb_database }}"
              echo Setting CosmosDB Account URI to https://${{ parameters.integration_test_cosmosdb_account }}.documents.azure.com:443/
              echo "##vso[task.setvariable variable=CosmosDB__DatabaseAccountUri]https://${{ parameters.integration_test_cosmosdb_account }}.documents.azure.com:443/"
            displayName: 'Mutate: Set CosmosDB Database Account for Integration Tests'

      - ${{ if eq(parameters.integration_test, true) }}:
          - task: DotNetCoreCLI@2
            displayName: 'Test: Integration tests'
            inputs:
              command: test
              projects: '${{ parameters.integration_test_project }}'
              arguments: '-v n $(code_coverage_arguments)'
              testRunTitle: 'Test: Integration tests'

      # Contract tests
      - ${{ if eq(parameters.contract_test, true) }}:
          - task: DotNetCoreCLI@2
            displayName: 'Test: Provider Contracts'
            inputs:
              command: test
              projects: '${{ parameters.contract_test_project }}'
              arguments: '-v n $(code_coverage_arguments)'
              testRunTitle: 'Test: Provider Contracts'

      # SonarCloud Results
      - ${{ if eq(parameters.static_code_analysis, true) }}:
          - task: SonarCloudAnalyze@1
            displayName: 'SonarCloud: Analysis'
          - task: SonarCloudPublish@1
            inputs:
              pollingTimeoutSec: '300'
            displayName: 'SonarCloud: Publish'

          # Convert code coverage reports into Cobertura for Azure DevOps
          - bash: |
              dotnet tool install dotnet-reportgenerator-globaltool --tool-path .
              FILES="$(find . -name "${{ variables.code_coverage_filename }}" -printf '%p;')"
              ./reportgenerator "-reports:$FILES" "-targetdir:${{ variables.code_coverage_cobertura_directory }}" "-reporttypes:Cobertura"
            displayName: 'Convert opencover coverage to Cobertura for Azure DevOps'

          # Publish Cobertura coverage to Azure DevOps
          - task: PublishCodeCoverageResults@1
            inputs:
              summaryFileLocation: ${{ variables.code_coverage_cobertura_directory }}/Cobertura.xml
              codecoverageTool: Cobertura

      # Build Docker Image, Scan and Push to Repository
      - template: ../steps/build-docker-build-and-scan.yml
        parameters:
          devops_artefact_name: '${{ parameters.devops_artefact_name }}'
          # Docker
          docker_workdir: '${{ parameters.docker_workdir }}'
          docker_imagename: '${{ parameters.docker_imagename }}'
          docker_imagetag: '${{ parameters.docker_imagetag }}'
          docker_containerregistryname: '${{ parameters.docker_containerregistryname }}'
          # Vulnerability Scanning
          vulnerability_scan: '${{ parameters.vulnerability_scan }}'
          vulnerability_workdir: '${{ parameters.vulnerability_workdir }}'

      # Publish Artefacts if required
      - ${{ if eq(parameters.functional_test, true) }}:
          - task: PublishBuildArtifacts@1
            displayName: 'Publish: Functional Tests Artifact'
            inputs:
              PathtoPublish: '${{ parameters.functional_test_path }}'
              ArtifactName: '${{ parameters.functional_test_artefact }}'

      - ${{ if eq(parameters.build_file, true) }}:
          - task: PublishBuildArtifacts@1
            displayName: 'Publish: Build Artefacts'
            inputs:
              PathtoPublish: '${{ parameters.build_file_path }}'
              ArtifactName: '${{ parameters.build_file_artefact }}'
