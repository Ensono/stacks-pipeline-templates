parameters:
  repo_root_dir: ""
  project_root_dir: ""
  pipeline_scripts_directory: ""
  # Maven
  maven_cache_directory: ""
  maven_surefire_reports_dir: ""
  maven_allowed_test_tags: ""
  maven_pom_file: "pom.xml"
  maven_settings_file: ""
  maven_repository_server: ""
  # Artifactory
  artifactory_username: ""
  artifactory_password: ""
  # Docker Config
  docker_build_container: ""
  # Vulnerability Scanning
  vulnerability_scan: false
  vulnerability_scan_fail_build_on_detection: true
  project_type: ""

steps:

  - task: Cache@2
    inputs:
      key: 'maven | "$(Agent.OS)" | ${{ parameters.project_root_dir }}/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)"
        maven
      path: "${{ parameters.project_root_dir }}/${{ parameters.maven_cache_directory }}"
    displayName: Cache Maven packages (${{ parameters.project_type }})

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-maven-install.bash"
      arguments: >
        -U "${{ parameters.artifactory_username }}"
        -P "${{ parameters.artifactory_password }}"
        -S "${{ parameters.maven_settings_file }}"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Install Packages (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-maven-update-version.bash"
      arguments: >
                   -Z "${{ parameters.maven_cache_directory }}"
                   -V "${{ parameters.maven_package_version }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Update version (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-checkstyle-check.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Checkstyle Check (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-format-check.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Format Check (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-spotbugs-check.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Spotbugs Check (${{ parameters.project_type }})"

  - ${{ if eq(parameters.vulnerability_scan, true) }}:
      - task: Bash@3
        inputs:
          filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-owasp-dependency-check.bash"
          arguments: >
            -Y "${{ parameters.vulnerability_scan_fail_build_on_detection }}"
            -Z "${{ parameters.maven_cache_directory }}"
          workingDirectory: "${{ parameters.project_root_dir }}"
        env:
          LC_ALL: "C.UTF-8"
        target:
          container: ${{ parameters.docker_build_container }}
        displayName: "Maven: OWASP Vulnerability Scan (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-maven-compile.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Compile Application (${{ parameters.project_type }})"

  #  - task: Bash@3
  #    inputs:
  #      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-download-test-deps.bash"
  #      arguments: >
  #        -X "${{ parameters.maven_allowed_test_tags }}"
  #        -Y "${{ parameters.maven_surefire_reports_dir }}"
  #        -Z "${{ parameters.maven_cache_directory }}"
  #      workingDirectory: "${{ parameters.project_root_dir }}"
  #    target:
  #      container: ${{ parameters.docker_build_container }}
  #    displayName: "Test: Download Test Deps (${{ parameters.project_type }})"
  #
  #  - task: Bash@3
  #    inputs:
  #      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
  #      arguments: >
  #        -a "Unit"
  #        -Z "${{ parameters.maven_cache_directory }}"
  #      workingDirectory: "${{ parameters.project_root_dir }}"
  #    target:
  #      container: ${{ parameters.docker_build_container }}
  #    displayName: "Test: Unit tests (${{ parameters.project_type }})"
  #
  #  - task: Bash@3
  #    inputs:
  #      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
  #      arguments: >
  #        -a "Component"
  #        -Z "${{ parameters.maven_cache_directory }}"
  #      workingDirectory: "${{ parameters.project_root_dir }}"
  #    target:
  #      container: ${{ parameters.docker_build_container }}
  #    displayName: "Test: Component tests (${{ parameters.project_type }})"
  #
  #  - task: Bash@3
  #    inputs:
  #      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
  #      arguments: >
  #        -a "Integration"
  #        -Z "${{ parameters.maven_cache_directory }}"
  #      workingDirectory: "${{ parameters.project_root_dir }}"
  #    target:
  #      container: ${{ parameters.docker_build_container }}
  #    displayName: "Test: Integration tests (${{ parameters.project_type }})"
  #
  #  - task: Bash@3
  #    inputs:
  #      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-generate-jacoco-report.bash"
  #      arguments: >
  #        -Z "${{ parameters.maven_cache_directory }}"
  #      workingDirectory: "${{ parameters.project_root_dir }}"
  #    target:
  #      container: ${{ parameters.docker_build_container }}
  #    displayName: "Generate Jacoco coverage reports (${{ parameters.project_type }})"
  #
  #  # TODO: Pull this out into a bash script?
  #  - bash: |
  #      set -euxo pipefail
  #      cp "${{ parameters.repo_root_dir }}/build/azDevOps/azure/coverage/"* .
  #      npm i
  #      ./node_modules/.bin/gulp inline-css-images
  #      ./node_modules/.bin/gulp inline-sources
  #    workingDirectory: "${{ parameters.project_root_dir }}/target/site/"
  #    target:
  #      container: node
  #    displayName: "Gulp: Inline Jacoco report assets (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-maven-deploy.bash"
      arguments: >
        -u "${{ parameters.artifactory_username }}"
        -p "${{ parameters.artifactory_password }}"
        -Z "${{ parameters.maven_cache_directory }}"
        -F "${{ parameters.maven_pom_file }}"
        -S "${{ parameters.maven_settings_file }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Deploy Application (${{ parameters.project_type }}) to Artifactory"
